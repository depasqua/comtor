Grading Parameters in Modules
==================================================

The following tables/values are stored by the database and are used
for determing the grading parameters/values within modules.

Not all modules use this optional feature.


table: defaultGradeBreakdowns
	docletGradeSectionID
	maxGrade
	
table: defaultGradeParameters
	docletGradeParameterId
	param
	
table: docletGradeParameters
	docletGradeParameterId
	docletId
	parameterName
	parameterDesc
	
table: docletGradeSections
	docletGradeSectionId
	docletId
	sectionName
	sectionDesc
	
table: doclets
	docletId
	docletName
	...

table: assignmentGradeBreakdowns
	assignmentId
	docletGradeSectionId
	maxGrade
	
table: assignmentgradeParameters
	assignmentId
	docletGradeParameterId
	param
	
table: assignments
	assignmentId
	courseId
	name
	...
	

Each doclet has an docletId. Each doclet can have none or many GradeSections,
each of which have a docletGradeSectionId (which each have a name and description.
Each docletGradeSectionId is also linked to a particular assignment, and each
has a maxGrade for that particular section.

The total score that a student can get for a particular module is the sums of the
maxGrades for each GradeSection of a module.

GradeSections describe each graded section (ie, for the module CheckForTags, the
 sections used are Author, Version, See, Since, Return, Param, and Throws).
 
GradeParameters lists the names of some of the parameters of a given module, and are
the modifiers to a given GradeSection.

This is most easily understood when related in the context of three modules in use in
COMTOR now that use this feature.

======================================================================================

CheckForTags:

If a number is specified in the CheckForTags Grading Breakdown section, then that number
will be the value of that particular grading point. The first three (Returns, Param,
Throws) are required. The last four can be left with 0 (which indicates that they
will not be checked for). For Grading Parameters, the user (optionally)
is to enter a list of some combination that is allowed, which will specify where the
module will look for that particular tag.

For example, for the Author parameter, one can enter a list of something like:

OVERVIEW CLASS

which indicates that the CheckForTags module will look in the overview and class comments
for the author tag.

Conversely, if the parameter is simply:

OVERVIEW

then the module will only look in the overview javadoc comment for the author tag.

Which types of areas can allowably be looked in for each optional tag (Author, Version, See,
Since) are specified when creating an assignment.

The sum of all of the Grading Breakdown section numbers will equal the denominator of the
ratio that the student will get back as the score. For example, by default, CheckForTags has the
following Grading Breakdown:

Return	3
Params	6
Throws	1

Under the default settings (those that are instantiated with the database at creation), a student
will get some number of points, with the maxGrade (indicating perfect according do this module) being
the sum of those three required parts, which is 10 points.

If those values are changed, and other sections are changed from 0, that will affect the max grade.
For example, if the Grading Breakdown looks like this:

Return	5
Params	5
Throws	5
Author	5

Then the maxGrade will be 20.

HOWEVER: It currently appears as if the GradingParameters do not affect the system (no messages are
printed out for the four optional tags). That is, if I specify that the Author tag is required, and should
appear only in the OVERVIEW javadoc comment, the report does not indicate any of this (but the student
will not recieve points for the section). Therefore, the student has no way of knowing what is required by
the professor/assignment.

Additionally, when using the default Grading Breakdown, sample code run will potentially recieve 10 points,
at most (3 points for Return, 6 for Params, 1 for Throws). However, when changed to, for example,

Return	5
Params	5
Throws	5

where the maxGrade should be 15, and the same sample code should theoretically still recieve perfect points
for all of those sections, the module seems not to notice this, and still awards only 10 points. However,
the maxGrade is correctly adjusted still, so the report will show 10.0/15.0.

THEREFORE:

Given the current status of COMTOR 1.5.2, all of the Grading Parameter/Breakdown presentation and code
within the module/web front-end has been commented out.


===============================================================================================

Percentage Methods:

Percentage Methods has one Grading Breakdown section, with a value called 'Percent', described as
the percentage of methods that contain comments. However, this observably only changed the maxGrade
for the entire module, as the scoring awarded (whether 'Percent' was 5 or 10) was always the same.

THEREFORE:

As of COMTOR 1.5.2, this Grading Breakdown section has been commented out.


=================================================================================================

Comment Average Ratio:

CommentAverageRatio has a Grading Breakdown section, and a Grading Parameters section.

The Grading Breakdown section contains one value, called 'Average'. Observably, this value, like the one
in Percentage Methods, only changes the maxGrade a submission can recieve for that module.

The Grading Parameters section contains one value, called 'min_ratio'. This value, according to its
description and the source code, should be the minimum ratio of words per comment for the report to give
full credit. As it appears, the 'Average' value (or maxGrade) is the number of points a student can recieve
for that module, and if the student's average number of words per comment is above whatever the min_ratio
is, then the student will recieve all the points for that section. However, observably, this value has no
effect on the final score, and does not appear to work.

THEREFORE:

As of COMTOR 1.5.2, these Grading Breakdown and Parameters section have been commented out.
