To write a module properly, there are several required standards to meet. Below the
following list will be a short, mock doclet to act as a template.

1. You must specify your doclet as part of the correct package.

	package comtor.analyzers;
	
2. You must include the following packages:

	import comtor.*;
	import com.sun.javadoc.*;
	
	Note: It will probably be useful to include the following as well, though they
	are not required:
	
	import java.util.*;
	import java.text.*;
	
	Furthermore, you can include any other java package you would like here.
	
3. Your module must 'implement' ComtorDoclet.

	public final class TestDoclet implements ComtorDoclet {
	}
	
4. Your module must have a variable for your properties list.

	Properties prop = new Properties();
	
5. Your module must have the following methods:

	a constructor (i.e., public TestDoclet(){})
	public Properties analyze (RootDoc)
	public void setGradingBreakdown(String, float)
	public float getGrade()
	public void setGradingParameters(String, String)
	public void setConfigProperties(Properties)
	
	Note: It is only necessary for analyze to have any content. It is possible for all
	of the other methods to be unimplemented. Additionally, it is okay to have other
	functions not on this list, to be used as helper functions for any in the above
	list. It is recommended that you make these 'helper' functions private, not public.

6. In your analyze(RootDoc) method, you must have at least a 'title' and 'score' property,
and you must return a properties list.

	prop.setProperty("title","TestDoclet");
	...
	prop.setProperty("score", calculatedScore);
	return prop;
	
Though not entirely necessary, it is recommended that you comment your code thouroughly,
perhaps using javadoc tags (in which case, your own doclet's source code may be a good
test for your doclet's functionality).
	
Given the above list, the following is a mock doclet template:

/*****************************************************************************************
 * This is a mock template. Feel free to use it as a base for writing your
 * own doclets.
 *****************************************************************************************/

package comtor.analyzers;

import comtor.*;
import com.sun.javadoc.*;
import java.util.*;
import java.text.*;

public class MockComtorDoclet implements ComtorDoclet()
{
	Properties prop = new Properties();
	int score;
	int num;
	boolean flag;
	
	public MockComtorDoclet()
	{
		//initialization of your variables can go here, but it is not necessary.
		//This can be left empty, but it will be run each time this doclet is run,
		//as a new instance of this class is created. 
 		score = 0;
 	}
 	
 	public Properties analyze (RootDoc root)
 	{
 		//Here is where the bulk of your source code analyzing will go. Any pertinent
 		//data to be returned to the user will be placed in a properties list.
 		//Please see below for details on the properties list.
 		
 		prop.setProperty("title","Mock Comtor Doclet");
 		
 		num = 0;
 		flag = helperFunc();
 		
 		if (flag)
 			prop.setProperty("000.000." + num, "Look, a boolean true!");
 		else
 			prop.setProperty("000.000." + num, "Wait, I shouldn't be seeing this...");
 		
 		num++;
 		
 		prop.setProperty("000.000." + num, "This should be the second message.");
 		
 		
 		prop.setProperty("score", 5);
 		
 		return prop;
 	}
 	
 	private boolean helperFunc()
 	{
 		return true;
 	}
 	
 	public void setGradingBreakdown(String section, float maxGrade)
 	{
 		//Not needed!
 	}
 	
	public float getGrade()
	{
		//Not needed!
	}
	
	public void setGradingParameters(String param, String value)
	{
		//Not needed!
	}
	
	public void setConfigProperties(Properties props)
	{
		//Not needed!
	}

}

/***********************************End of File*****************************************/

Details on the properties list:

COMTOR implements a system to properly order/list returned messages to the user when
doclet reports are generated. All properties will be returned as messages to the user when
the report is generated except for the 'title' and 'score' properties, which are pulled out
by the report generator and are considered special cases.

The rest of the messages are put into a hierarchy by naming the property according to a
three-part number:

XXX.XXX.X

where each XXX represents a three digit number, and the last X is a single digit number.
Each decimal delineates a new header/subsection, and messages are ordered according to their
number within each section.

For example:

prop.setProperty("000","First section.");
prop.setProperty("000.001","First header.");
prop.setProperty("000.001.0","First entry under first header.");
prop.setProperty("000.001.1","Second entry under first header.");
prop.setProperty("000.002","Second header.");
prop.setProperty("001","Second section.");

And so on.

/*************************************************************************************/

Please keep in mind when writing your doclets that currently, COMTOR (through the use of
javadoc) can only see javadoc comments and general class structure (essentially, an
interface, and no implementation). Javadoc does NOT recognize or see '//'-type comments,
as they are considered part of implementation and ignored.

/************************************************************************************/

Finally, when writing your module, it is highly recommended that you create your own
personal test file (a mock java program) to test your module.
