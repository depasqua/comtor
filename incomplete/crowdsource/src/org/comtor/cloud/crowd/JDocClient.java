/************************************************************************
 *  Crowd-Sourced Comments
 *  Copyright (C) 2012 The College of New Jersey
 *  Copyright (C) 2012 Michael E. Locasto
 *
 *  This program is free software: you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see
 *  <http://www.gnu.org/licenses/>.
 ***********************************************************************/
package org.comtor.cloud.crowd;

import com.sun.javadoc.*;
import java.io.*;
import java.util.Vector;

/**
 * The <code>JDocClient</code> class represents a simple {@link
 * ICodeStore} client that uses the javadoc tool and RootDoc
 * class to explore a codebase and store it into a Code Store.
 * 
 * This class does not need a Java <tt>main</tt> method because
 * javadoc invokes it via the <code>start</code> method.
 *
 * @author Michael E. Locasto
 */
public class JDocClient
    extends CodeStoreClient
{

    /**
     * A static singleton reference to ourselves that we can pass around.
     */
    private static JDocClient m_me = null;


    private String [] m_options = new String[0];

    /**
     * Manufacture and return static singleton.
     */
    public static synchronized JDocClient getInstance(String file)
    {
	if(null==m_me)
	{
	    m_me = new JDocClient(file);
	}
	return m_me;
    }

    /**
     * The private constructor supports the singleton pattern so we
     * can supply our doclet "child" with a unique reference to us
     * (there is no other graceful way to let the child know about
     * us). The eventual purpose of what we need to support is the
     * doclet's ability to push CodeChunks to us; from there, we push
     * them to our code store.
     *
     * @param args  a string array of length one containing the file name
     * of the XML configuration file
     */
    private JDocClient(String file)
    {
	boolean configured = false;
	
	configured = executeConfig(file);
	if(!configured)
	{
	    System.err.println("["+this.getClass().getName()
			       +"]: configuration failed...aborting");
	    return;
	}
    }

    /**
     * The {@link JDocClientDoclet} class use this package-visible
     * callback method to push {@link CodeChunk}s to us to store into
     * our {@link ICodeStore}.
     *
     * @precondition m_store is not null
     * @return a boolean indicating whether the delivery was successful. Deliveries MAY
     *  be deferred / lazy (i.e., put on an internal list and pushed to the code store
     *  after this method returns)
     * @param chunk - a CodeChunk generated by taking javadoc Doc information
     */
    boolean takeDelivery(CodeChunk chunk)
    {
	m_store.store(chunk);
	return true;
    }

    /**
     * Open the target (source) file.
     * Read in and parse the file (by calling doStorage()).
     * Store code chunks into the code store (via doStorage()).
     * Close the store.
     */
    void kickoff()
    {
	String file = "";
	Vector<String> opts = new Vector<String>();

	file = m_conf.m_specific.getProperty(ConfigKeys.SINGLE_SRC_FILE_TARGET);
	System.out.println("["+this.getClass().getName()
			   +"]: examining file: "
			   +file);

	if(null!=m_store && m_store.isStoreInitialized())
	{
	    int index = 0;

	    opts.add("-private");
	    opts.add("-sourcepath");
	    opts.add("../code/src");
	    opts.add(file);

	    m_options = new String[opts.size()];

	    for (String option : opts) {
		m_options[index] = opts.elementAt(index);
		System.err.print(" " + m_options[index++]);
	    }
	    System.err.println("");

	    com.sun.tools.javadoc.Main.execute("JDocClient", 
					       "org.comtor.cloud.crowd.JDocClientDoclet", 
					       m_options);
	}else{
	    System.err.println("["+this.getClass().getName()
			       +"]: code store not initialized.");
	}

	//output number of entries in the ICodeStore
	System.out.println("["+this.getClass().getName()
			   +"]: number of code entries in code store: "
			   +m_store.count());

	m_store.closeStore();

	return;
    }

    /**
     * Pass this a filename; the filename points to a XML properties file that
     * acts as our configuration file.
     */
    public static void main(String [] args)
    {
        JDocClient me;

	if(null==args || 0==args.length)
	    return;

	if(1!=args.length)
	{
	    System.err.println("Invalid args.");
	    return;
	}
	
	me = JDocClient.getInstance(args[0]);
	me.kickoff();

	return;
    }

}