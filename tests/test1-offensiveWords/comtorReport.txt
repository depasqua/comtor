COMTOR Execution Report - Sun, 13 Jan 2013 00:07:00 -0500
===========================================
| Execution Score Summary                 |
===========================================
| Module Name                  | Score    |
-------------------------------------------
| Check Author                 | 100%     |
| Comment Average Ratio        | 21.06    |
| Offensive Words              | 92%      |
| Percentage Methods           | 100%     |
| Spell Check                  | 92%      |
===========================================

====================================================================================
Analysis Module: Check Author
This module validates the presence of the @author tag in each class. Additionally,
this module checks for non-blank @author tags (missing names following the tag).

Notes:
	The @author tag is widely used to show who has contributed source code to a class.
	Multiple @author tags are permitted in the class-block of comments.
	References to line numbers in this report are generally to the subsequent non-comment Java statement that follows the commment/comment block under analysis.
	The score in this module is calculated by determining the percentage of classes processed that contain no errors (contain @author tags with strings following the tag).

Analysis: 
	offensiveTest.AllOffensiveWords:
		1 or more @author tags were found.

	offensiveTest.NoOffensiveWords:
		1 or more @author tags were found.

	offensiveTest.OneOffensiveWord:
		1 or more @author tags were found.

Overall module score: 100%

Execution time: 3(ms)

Execution metrics: 
	3 class(es) were processed.
	0 class(es) contained errors related to the use of the @author tag.
	0 class(es) are missing @author tags.
	0 @author tag(s) are empty (missing names following tag)
	3 @author tag(s) were located with text following the tags.
====================================================================================
Analysis Module: Comment Average Ratio
This module analyzes the length (in terms of the number of words) of class, constructor,
and method comments. The reported score is the ratio of the number of words that
comprise the comments to the overall number of comments.

Notes:
	Javadoc tags (@tag) from constructors and methods are not considered as a part of this analysis.
	The score in this module is calculated by determining the ratio of the number of words from comments to the total number of comments.

Analysis: 
	offensiveTest.AllOffensiveWords:
Overall module score: 21.06

Execution time: 6(ms)

Execution metrics: 
	A total of 3 classes were processed.
	A total of 5 constructors were processed.
	A total of 5 methods were processed.
	A total of 3 fields were processed.
	A total of 337 words were processed.
	A total of 16 class, constructor, method, and field comments were processed.
	The overall average number of words per comment is 21.
====================================================================================
Analysis Module: Offensive Words
This module identifies "offensive" English words used in comments at the class, method,
and field level. Usage of these types of words is considered to be unprofessional.
The COMTOR dictionary list of offensive words contains over 1,300 words and word
variants. If you have a suggestion for a word that should be added to the dictionary,
please email the COMTOR team at comtor@tcnj.edu.

Notes:
	Constructor and method tags which are not @param, @return, or @throws are not currently processed.
	The score in this module is calculated by determining the overall percentage of non-offensive words from all comments.

Analysis: 
	offensiveTest.AllOffensiveWords:
		Class comment analysis:
			'xxx' considered an offensive word on/near line 12.
			'xxx' considered an offensive word on/near line 12.

		Constructor comment analysis:
			offensiveTest.AllOffensiveWords(int, int): 
				'xxx' considered an offensive word on/near line 24.
				'xxx' considered an offensive word on/near line 24.

				two (@param two): 
					'xxx' considered an offensive word on/near line 24.
					'xxx' considered an offensive word on/near line 24.

				three (@param three): 
					'xxx' considered an offensive word on/near line 24.
					'xxx' considered an offensive word on/near line 24.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered an offensive word on/near line 24.
					'xxx' considered an offensive word on/near line 24.

		Method comment analysis:
			offensiveTest.AllOffensiveWords.someMethod(java.lang.String, java.lang.String): 
				'xxx' considered an offensive word on/near line 40.
				'xxx' considered an offensive word on/near line 40.

				arg2 (@param arg2): 
					'xxx' considered an offensive word on/near line 40.
					'xxx' considered an offensive word on/near line 40.

				arg1 (@param arg1): 
					'xxx' considered an offensive word on/near line 40.
					'xxx' considered an offensive word on/near line 40.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered an offensive word on/near line 40.
					'xxx' considered an offensive word on/near line 40.

				(@return): 
					'xxx' considered an offensive word on/near line 40.
					'xxx' considered an offensive word on/near line 40.

		Field comment analysis: 
			offensiveTest.AllOffensiveWords.foo: 
				'xxx' considered an offensive word on/near line 14.
				'xxx' considered an offensive word on/near line 14.

	offensiveTest.NoOffensiveWords:
		No offensive words were found in processing this class.

	offensiveTest.OneOffensiveWord:
		Class comment analysis:
			'xxx' considered an offensive word on/near line 12.

		Constructor comment analysis:
			offensiveTest.OneOffensiveWord(int, int): 
				'xxx' considered an offensive word on/near line 34.

				two (@param two): 
					'xxx' considered an offensive word on/near line 34.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered an offensive word on/near line 34.

			offensiveTest.OneOffensiveWord(int): 
				'xxx' considered an offensive word on/near line 22.

				one (@param one): 
					'xxx' considered an offensive word on/near line 22.

		Method comment analysis:
			offensiveTest.OneOffensiveWord.returnTrue(): 
				'xxx' considered an offensive word on/near line 60.

				(@return): 
					'xxx' considered an offensive word on/near line 60.

			offensiveTest.OneOffensiveWord.main(java.lang.String[]): 
				'xxx' considered an offensive word on/near line 48.

				args (@param args): 
					'xxx' considered an offensive word on/near line 48.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered an offensive word on/near line 48.

		Field comment analysis: 
			offensiveTest.OneOffensiveWord.foo: 
				'xxx' considered an offensive word on/near line 14.

Notes:
	34 word(s) in your source code are considered offensive due to the fact that they
are listed in our 'offensive word list'. In order to create a greater level of professionalism
in your source code, please consider editing these words.

Overall module score: 92%

Execution time: 36(ms)

Execution metrics: 
	1 package(s) were processed.
	3 class(es) were processed.
	5 constructor(s) were processed.
	5 method(s) were processed.
	12 parameter(s) were processed.
	3 field(s) were processed.
	434 words were processed (including duplicates).
	89 unique words were processed (excludes duplicates).
	34 'offensive' words were identified (including duplicates).
====================================================================================
Analysis Module: Percentage Methods
This module calculates the percentage of constructors and method that have associated
comments. The reported score is the overall percentage of methods and constructors
which are commented. The length and/or content of the comment is not considered.
Other types of comments (class-level, field-level) are not considered in this analysis.

Notes:
	References to line numbers in this report are generally to the subsequent non-comment Java statement that follows the commment/comment block under analysis.
	The score in this module is calculated by determining the overall percentage of commented methods and constructors across all methods and constructors identified.

Analysis: 
	offensiveTest.AllOffensiveWords:
		No uncommented constructors or methods were found in processing this class.

	offensiveTest.NoOffensiveWords:
		No uncommented constructors or methods were found in processing this class.

	offensiveTest.OneOffensiveWord:
		No uncommented constructors or methods were found in processing this class.

Overall module score: 100%

Execution time: 1(ms)

Execution metrics: 
	3 class(es) were processed.
	5 method(s) were processed.
	5 method(s) were commented.
	100% method(s) were commented across all classes.
	5 constructors(s) were processed.
	5 constructors(s) were commented.
	100% constructors(s) were commented across all classes.
====================================================================================
Analysis Module: Spell Check
This module compares words found in comments against an English word dictionary.
The COMTOR word dictionary contains more than 97,000 entries. The analysis includes
the list of known Java API classes (JDK), HTML tags and attributes, Java keywords,
and user-defined symbols from the submitted code (class, method, constructor, field
names). COMTOR uses JavaDoc, as such JavaDoc does not provide access to local variables
within methods and blocks. Thus, the word list is not exhaustive.

Notes:
	Constructor and method tags which are not @param, @return, or @throws are not currently processed.
	The score in this module is calculated by determining the overall percentage of correctly spelled words from all comments 

Analysis: 
	offensiveTest.AllOffensiveWords:
		Class comment analysis:
			'xxx' considered a misspelled word on/near line 12.
			'xxx' considered a misspelled word on/near line 12.

		Constructor comment analysis:
			offensiveTest.AllOffensiveWords(int, int): 
				'xxx' considered a misspelled word on/near line 24.
				'xxx' considered a misspelled word on/near line 24.

				two (@param two): 
					'xxx' considered a misspelled word on/near line 24.
					'xxx' considered a misspelled word on/near line 24.

				three (@param three): 
					'xxx' considered a misspelled word on/near line 24.
					'xxx' considered a misspelled word on/near line 24.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered a misspelled word on/near line 24.
					'xxx' considered a misspelled word on/near line 24.

		Method comment analysis:
			offensiveTest.AllOffensiveWords.someMethod(java.lang.String, java.lang.String): 
				'xxx' considered a misspelled word on/near line 40.
				'XXX' considered a misspelled word on/near line 40.

				arg2 (@param arg2): 
					'xxx' considered a misspelled word on/near line 40.
					'xxx' considered a misspelled word on/near line 40.

				arg1 (@param arg1): 
					'XXX' considered a misspelled word on/near line 40.
					'XXX' considered a misspelled word on/near line 40.

				NullPointerException (@throws NullPointerException): 
					'XXX' considered a misspelled word on/near line 40.
					'XXX' considered a misspelled word on/near line 40.

				(@return): 
					'xxx' considered a misspelled word on/near line 40.
					'xxx' considered a misspelled word on/near line 40.

		Field comment analysis: 
			offensiveTest.AllOffensiveWords.foo: 
				'xxx' considered a misspelled word on/near line 14.
				'xxx' considered a misspelled word on/near line 14.

	offensiveTest.NoOffensiveWords:
		No spelling errors were found in processing this class.

	offensiveTest.OneOffensiveWord:
		Class comment analysis:
			'xxx' considered a misspelled word on/near line 12.

		Constructor comment analysis:
			offensiveTest.OneOffensiveWord(int, int): 
				'xxx' considered a misspelled word on/near line 34.

				two (@param two): 
					'xxx' considered a misspelled word on/near line 34.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered a misspelled word on/near line 34.

			offensiveTest.OneOffensiveWord(int): 
				'xxx' considered a misspelled word on/near line 22.

				one (@param one): 
					'xxx' considered a misspelled word on/near line 22.

		Method comment analysis:
			offensiveTest.OneOffensiveWord.returnTrue(): 
				'xxx' considered a misspelled word on/near line 60.

				(@return): 
					'xxx' considered a misspelled word on/near line 60.

			offensiveTest.OneOffensiveWord.main(java.lang.String[]): 
				'xxx' considered a misspelled word on/near line 48.

				args (@param args): 
					'xxx' considered a misspelled word on/near line 48.

				NullPointerException (@throws NullPointerException): 
					'xxx' considered a misspelled word on/near line 48.

		Field comment analysis: 
			offensiveTest.OneOffensiveWord.foo: 
				'xxx' considered a misspelled word on/near line 14.

Notes:
	2 word(s) in your source code are considered spelled incorrectly due to the fact
that they are listed in our dictionary. In order to create a greater level of professionalism
in your source code, please consider editing these words. If you believe you have
a false positive result, please email the COMTOR team at comtor@tcnj.edu and we
consider your submission to the dictionary.

Overall module score: 92%

Execution time: 12(ms)

Execution metrics: 
	0% of the words in the comments were misspelled.
	434 words analyzed.
	3 class(es) were processed.
	93 correctly spelled words (excludes duplicates)
	2 incorrectly spelled words (excludes duplicates)
	307 duplicate good words
	32 duplicate bad words
====================================================================================
