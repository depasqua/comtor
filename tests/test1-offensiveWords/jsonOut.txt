{
   "information": {
      "classes processed": 3,
      "description": "This module compares words found in comments against an English word dictionary.\nThe COMTOR word dictionary contains more than 97,000 entries. The analysis includes\nthe list of known Java API classes (JDK), HTML tags and attributes, Java keywords,\nand user-defined symbols from the submitted code (class, method, constructor, field\nnames). COMTOR uses JavaDoc, as such JavaDoc does not provide access to local variables\nwithin methods and blocks. Thus, the word list is not exhaustive.",
      "name": "Spell Check"
   },
   "results": {
      "classes": {
         "offensiveTest.Test2": {
            "methods": {},
            "noProblemMessage": "No spelling errors were found in processing this class.",
            "location": {},
            "issues": [],
            "numProblemsDetected": "0",
            "constructors": {"offensiveTest.Test2()": {
               "location": {},
               "throws": {},
               "issues": [],
               "parameters": {}
            }},
            "fields": {"offensiveTest.Test2.foo": {
               "location": {},
               "issues": []
            }}
         },
         "offensiveTest.Test3": {
            "methods": {
               "offensiveTest.Test3.returnTrue()": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.Test3.main(java.lang.String[])": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "returns": [],
                  "parameters": {"args": []}
               }
            },
            "noProblemMessage": "No spelling errors were found in processing this class.",
            "location": {},
            "issues": [],
            "numProblemsDetected": "0",
            "constructors": {
               "offensiveTest.Test3(boolean)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               },
               "offensiveTest.Test3(int)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               },
               "offensiveTest.Test3(java.lang.String)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               }
            },
            "fields": {
               "offensiveTest.Test3.field1": {
                  "location": {},
                  "issues": []
               },
               "offensiveTest.Test3.field2": {
                  "location": {},
                  "issues": []
               },
               "offensiveTest.Test3.field3": {
                  "location": {},
                  "issues": []
               }
            }
         },
         "offensiveTest.Test": {
            "methods": {
               "offensiveTest.Test.main(java.lang.String[])": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "returns": [],
                  "parameters": {"args": []}
               },
               "offensiveTest.Test.returnTrue()": {
                  "location": {},
                  "throws": {},
                  "issues": ["'methodz' considered a misspelled word on/near line 43"],
                  "returns": [],
                  "parameters": {}
               }
            },
            "location": {},
            "issues": [
               "'xxx' considered a misspelled word on/near line 8",
               "'COMTOR' considered a misspelled word on/near line 8"
            ],
            "numProblemsDetected": "9",
            "constructors": {
               "offensiveTest.Test(int, int)": {
                  "location": {},
                  "throws": {},
                  "issues": [
                     "'missingz' considered a misspelled word on/near line 25",
                     "'HHH' considered a misspelled word on/near line 25",
                     "'MMM' considered a misspelled word on/near line 25"
                  ],
                  "parameters": {}
               },
               "offensiveTest.Test(int)": {
                  "location": {},
                  "throws": {},
                  "issues": [
                     "'Multi' considered a misspelled word on/near line 16",
                     "'aboutz' considered a misspelled word on/near line 16"
                  ],
                  "parameters": {}
               }
            },
            "fields": {"offensiveTest.Test.foo": {
               "location": {},
               "issues": ["'agout' considered a misspelled word on/near line 10"]
            }}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "14% of the words in the comments were misspelled.",
         "66 words analyzed.",
         "3 class(es) were processed.",
         "28 correctly spelled words (excludes duplicates)",
         "9 incorrectly spelled words (excludes duplicates)",
         "29 duplicate good words",
         "0 duplicate bad words"
      ],
      "score": "86%",
      "timing": {
         "execution time": "5",
         "start time": "1353728426565",
         "end time": "1353728426570"
      },
      "notes": {
         "postamble": ["9 word(s) in your source code are considered spelled incorrectly due to the fact\nthat they are listed in our dictionary. In order to create a greater level of professionalism\nin your source code, please consider editing these words. If you believe you have\na false positive result, please email the COMTOR team at comtor@tcnj.edu and we\nconsider your submission to the dictionary."],
         "preamble": ["Javadoc tags (@tag) from constructors and methods are not yet processed."]
      }
   }
}
{
   "information": {
      "constructors processed": 6,
      "classes processed": 3,
      "description": "This module calculates the percentage of methods that have associated comments. This\ncalculation will include both methods and constructors. The reported score is the\noverall percentage of methods and constructors which are commented. The length and/or\ncontent of the comment is not considered.",
      "name": "Percentage Methods",
      "constructors commented": 3,
      "methods processed": 4,
      "methods commented": 4
   },
   "results": {
      "classes": {
         "offensiveTest.Test2": {
            "methods": {},
            "location": {},
            "issues": ["0 of the 1 constructors (0%) are commented."],
            "numProblemsDetected": "1",
            "constructors": {"offensiveTest.Test2()": {
               "location": {},
               "throws": {},
               "issues": ["offensiveTest.Test2() is not commented at/near line 12."],
               "parameters": {}
            }},
            "fields": {}
         },
         "offensiveTest.Test3": {
            "methods": {},
            "location": {},
            "issues": [
               "1 of the 3 constructors (33%) are commented.",
               "2 of the 2 methods (100%) are commented."
            ],
            "numProblemsDetected": "2",
            "constructors": {
               "offensiveTest.Test3(boolean)": {
                  "location": {},
                  "throws": {},
                  "issues": ["offensiveTest.Test3(boolean) is not commented at/near line 28."],
                  "parameters": {}
               },
               "offensiveTest.Test3(int)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               },
               "offensiveTest.Test3(java.lang.String)": {
                  "location": {},
                  "throws": {},
                  "issues": ["offensiveTest.Test3(java.lang.String) is not commented at/near line 32."],
                  "parameters": {}
               }
            },
            "fields": {}
         },
         "offensiveTest.Test": {
            "methods": {},
            "noProblemMessage": "No uncommented constructors or methods were found in processing this class.",
            "location": {},
            "issues": [
               "2 of the 2 constructors (100%) are commented.",
               "2 of the 2 methods (100%) are commented."
            ],
            "numProblemsDetected": "0",
            "constructors": {
               "offensiveTest.Test(int, int)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               },
               "offensiveTest.Test(int)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               }
            },
            "fields": {}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "3 class(es) were processed.",
         "4 method(s) were processed.",
         "4 method(s) were commented.",
         "100% method(s) were commented across all classes.",
         "6 constructors(s) were processed.",
         "3 constructors(s) were commented.",
         "50% constructors(s) were commented across all classes."
      ],
      "score": "70%",
      "timing": {
         "execution time": "3",
         "start time": "1353728423390",
         "end time": "1353728423393"
      },
      "notes": {
         "postamble": ["3 location(s) in your source code are missing comments. Consider commenting all constructors\nand methods to reduce this amount. Additionally, if you are receving false results,\nplease be sure you are using the Javadoc commenting style."],
         "preamble": ["In this module's report, commented constructors and methods are not shown. Only uncommented\nconstructors or methods are listed, when identified during analysis."]
      }
   }
}
{
   "information": {
      "classes processed": 3,
      "description": "This module validates the presence of the @author tag in each class. Additionally,\nthis module checks for non-blank @author tags (missing author name).",
      "name": "Check Author",
      "classes with errors": 2,
      "tags errors": 2,
      "tags found": 2
   },
   "results": {
      "classes": {
         "offensiveTest.Test2": {
            "methods": {},
            "location": {},
            "issues": [
               "An empty @author tag was found in the comment block preceeding line 12",
               "An empty @author tag was found in the comment block preceeding line 12"
            ],
            "constructors": {},
            "fields": {}
         },
         "offensiveTest.Test3": {
            "methods": {},
            "location": {},
            "issues": ["@author tag found: Peter DePasquale"],
            "constructors": {},
            "fields": {}
         },
         "offensiveTest.Test": {
            "methods": {},
            "location": {},
            "issues": ["No @author tags found."],
            "constructors": {},
            "fields": {}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "3 class(es) were processed.",
         "2 class(es) contained errors related to the use of the @author tag.",
         "1 class(es) are missing @author tags.",
         "2 @author tag(s) are empty (missing names following tag)",
         "2 @author tag(s) were located with text following the tags."
      ],
      "score": "33%",
      "timing": {
         "execution time": "1",
         "start time": "1353728423396",
         "end time": "1353728423397"
      },
      "notes": {
         "postamble": ["1 @author tags are missing from class-level documentation. 2 @author tag(s) are empty\nand have no author provided."],
         "preamble": ["References to line numbers in this report are generally to the subsequent non-comment Java statement that follows the commment/comment block under analysis."]
      }
   }
}
{
   "information": {
      "constructors processed": 6,
      "fields processed": 5,
      "classes processed": 3,
      "description": "This module identifies \"offensive\" English words used in comments at the class, method,\nand field level. Usage of these types of words is considered to be unprofessional.\nThe COMTOR dictionary list of offensive words contains over 1,300 words and word\nvariants. If you have a suggestion for a word that should be added to the dictionary,\nplease email the COMTOR team at comtor@tcnj.edu.",
      "name": "Offensive Words",
      "methods processed": 4,
      "packages processed": 1,
      "parameters processed": 5,
      "total number of words processed": 77
   },
   "results": {
      "classes": {
         "offensiveTest.Test2": {
            "methods": {},
            "noProblemMessage": "No offensive words were found in processing this class.",
            "location": {},
            "issues": [],
            "numProblemsDetected": "0",
            "constructors": {"offensiveTest.Test2()": {
               "location": {},
               "throws": {},
               "issues": [],
               "parameters": {}
            }},
            "fields": {"offensiveTest.Test2.foo": {
               "location": {},
               "issues": []
            }}
         },
         "offensiveTest.Test3": {
            "methods": {
               "offensiveTest.Test3.returnTrue()": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "returns": [
                     "'fuck' considered an offensive word on/near line 48",
                     "'shit' considered an offensive word on/near line 48"
                  ],
                  "parameters": {}
               },
               "offensiveTest.Test3.main(java.lang.String[])": {
                  "location": {},
                  "throws": {},
                  "issues": ["'ass' considered an offensive word on/near line 41"],
                  "returns": [],
                  "parameters": {"args": ["'cock' considered an offensive word on/near line 41"]}
               }
            },
            "location": {},
            "issues": ["'shit' considered an offensive word on/near line 11"],
            "numProblemsDetected": "9",
            "constructors": {
               "offensiveTest.Test3(boolean)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               },
               "offensiveTest.Test3(int)": {
                  "location": {},
                  "throws": {},
                  "issues": ["'fuck' considered an offensive word on/near line 24"],
                  "parameters": {"foo": ["'shit' considered an offensive word on/near line 24"]}
               },
               "offensiveTest.Test3(java.lang.String)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               }
            },
            "fields": {
               "offensiveTest.Test3.field1": {
                  "location": {},
                  "issues": []
               },
               "offensiveTest.Test3.field2": {
                  "location": {},
                  "issues": [
                     "'fucking' considered an offensive word on/near line 17",
                     "'fuck' considered an offensive word on/near line 17"
                  ]
               },
               "offensiveTest.Test3.field3": {
                  "location": {},
                  "issues": []
               }
            }
         },
         "offensiveTest.Test": {
            "methods": {
               "offensiveTest.Test.main(java.lang.String[])": {
                  "location": {},
                  "throws": {"NullPointerException": ["'dick' considered an offensive word on/near line 32"]},
                  "issues": ["'fuck' considered an offensive word on/near line 32"],
                  "returns": [],
                  "parameters": {"args": ["'ass' considered an offensive word on/near line 32"]}
               },
               "offensiveTest.Test.returnTrue()": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "returns": ["'bullshit' considered an offensive word on/near line 43"],
                  "parameters": {}
               }
            },
            "location": {},
            "issues": ["'xxx' considered an offensive word on/near line 8"],
            "numProblemsDetected": "9",
            "constructors": {
               "offensiveTest.Test(int, int)": {
                  "location": {},
                  "throws": {"NullPointerException": ["'shit' considered an offensive word on/near line 25"]},
                  "issues": ["'fuck' considered an offensive word on/near line 25"],
                  "parameters": {
                     "two": ["'fuck' considered an offensive word on/near line 25"],
                     "three": ["'dick' considered an offensive word on/near line 25"]
                  }
               },
               "offensiveTest.Test(int)": {
                  "location": {},
                  "throws": {},
                  "issues": [],
                  "parameters": {}
               }
            },
            "fields": {"offensiveTest.Test.foo": {
               "location": {},
               "issues": []
            }}
         }
      },
      "charts": [],
      "packages": {"offensiveTest": []},
      "metrics": [
         "1 package(s) were processed.",
         "3 class(es) were processed.",
         "6 constructor(s) were processed.",
         "4 method(s) were processed.",
         "5 parameter(s) were processed.",
         "5 field(s) were processed.",
         "77 words were processed (including duplicates).",
         "39 unique words were processed (excludes duplicates).",
         "18 'offensive' words were identified (including duplicates)."
      ],
      "score": "77%",
      "timing": {
         "execution time": "8",
         "start time": "1353728424114",
         "end time": "1353728424122"
      },
      "notes": {
         "postamble": ["18 word(s) in your source code are considered offensive due to the fact that they\nare listed in our 'offensive word list'. In order to create a greater level of professionalism\nin your source code, please consider editing these words."],
         "preamble": ["Method tags which are not @param, @return, or @throws are not currently processed."]
      }
   }
}
