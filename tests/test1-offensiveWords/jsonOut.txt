{
   "information": {
      "classes processed": 3,
      "description": "This module validates the presence of the @author tag in each class. Additionally,\nthis module checks for non-blank @author tags (missing names following the tag).",
      "name": "Check Author",
      "classes with errors": 0,
      "tags errors": 0,
      "tags found": 3
   },
   "results": {
      "classes": {
         "offensiveTest.NoOffensiveWords": {
            "returns_analyzed": false,
            "summary": ["@author tag found: Peter J DePasquale"],
            "methods": {},
            "noProblemMessage": "1 or more @author tags were found.",
            "location": {},
            "issues": [],
            "fields_analyzed": false,
            "throws_analyzed": false,
            "params_analyzed": false,
            "constructors": {},
            "fields": {}
         },
         "offensiveTest.OneOffensiveWord": {
            "returns_analyzed": false,
            "summary": ["@author tag found: xxx"],
            "methods": {},
            "noProblemMessage": "1 or more @author tags were found.",
            "location": {},
            "issues": [],
            "fields_analyzed": false,
            "throws_analyzed": false,
            "params_analyzed": false,
            "constructors": {},
            "fields": {}
         },
         "offensiveTest.AllOffensiveWords": {
            "returns_analyzed": false,
            "summary": ["@author tag found: xxx xxx"],
            "methods": {},
            "noProblemMessage": "1 or more @author tags were found.",
            "location": {},
            "issues": [],
            "fields_analyzed": false,
            "throws_analyzed": false,
            "params_analyzed": false,
            "constructors": {},
            "fields": {}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "3 class(es) were processed.",
         "0 class(es) contained errors related to the use of the @author tag.",
         "0 class(es) are missing @author tags.",
         "0 @author tag(s) are empty (missing names following tag)",
         "3 @author tag(s) were located with text following the tags."
      ],
      "score": "100%",
      "timing": {
         "execution time": "3",
         "start time": "1358053618370",
         "end time": "1358053618373"
      },
      "notes": {
         "postamble": [],
         "preamble": [
            "The @author tag is widely used to show who has contributed source code to a class.",
            "Multiple @author tags are permitted in the class-block of comments.",
            "References to line numbers in this report are generally to the subsequent non-comment Java statement that follows the commment/comment block under analysis.",
            "The score in this module is calculated by determining the percentage of classes processed that contain no errors (contain @author tags with strings following the tag)."
         ]
      }
   }
}
{
   "information": {
      "description": "This module analyzes the length (in terms of the number of words) of class, constructor,\nand method comments. The reported score is the ratio of the number of words that\ncomprise the comments to the overall number of comments.",
      "name": "Comment Average Ratio"
   },
   "results": {
      "classes": {
         "offensiveTest.NoOffensiveWords": {
            "returns_analyzed": false,
            "summary": [
               "There were 29 words in the class comments.",
               "The average length of all comments in the class (including all members) is 14 words."
            ],
            "methods": {
               "offensiveTest.NoOffensiveWords.returnTrue()": {
                  "summary": ["The length of comments is 10 words (on/near line 59)."],
                  "location": "59",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.NoOffensiveWords.main(java.lang.String[])": {
                  "summary": ["The length of comments is 16 words (on/near line 48)."],
                  "location": "48",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               }
            },
            "location": "11",
            "issues": [],
            "fields_analyzed": true,
            "throws_analyzed": false,
            "params_analyzed": false,
            "constructors": {
               "offensiveTest.NoOffensiveWords(int, int)": {
                  "summary": ["The length of comments is 15 words (on/near line 35)."],
                  "location": "35",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               },
               "offensiveTest.NoOffensiveWords(int)": {
                  "summary": ["The length of comments is 12 words (on/near line 20)."],
                  "location": "20",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               }
            },
            "fields": {"offensiveTest.NoOffensiveWords.foo": {
               "summary": ["The length of comments is 5 words (on/near line 13)."],
               "location": "13",
               "issues": []
            }}
         },
         "offensiveTest.OneOffensiveWord": {
            "returns_analyzed": false,
            "summary": [
               "There were 42 words in the class comments.",
               "The average length of all comments in the class (including all members) is 24 words."
            ],
            "methods": {
               "offensiveTest.OneOffensiveWord.returnTrue()": {
                  "summary": ["The length of comments is 20 words (on/near line 60)."],
                  "location": "60",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.OneOffensiveWord.main(java.lang.String[])": {
                  "summary": ["The length of comments is 23 words (on/near line 48)."],
                  "location": "48",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               }
            },
            "location": "12",
            "issues": [],
            "fields_analyzed": true,
            "throws_analyzed": false,
            "params_analyzed": false,
            "constructors": {
               "offensiveTest.OneOffensiveWord(int, int)": {
                  "summary": ["The length of comments is 28 words (on/near line 34)."],
                  "location": "34",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               },
               "offensiveTest.OneOffensiveWord(int)": {
                  "summary": ["The length of comments is 22 words (on/near line 22)."],
                  "location": "22",
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               }
            },
            "fields": {"offensiveTest.OneOffensiveWord.foo": {
               "summary": ["The length of comments is 10 words (on/near line 14)."],
               "location": "14",
               "issues": []
            }}
         },
         "offensiveTest.AllOffensiveWords": {
            "returns_analyzed": false,
            "summary": [
               "There were 43 words in the class comments.",
               "The average length of all comments in the class (including all members) is 26 words."
            ],
            "methods": {"offensiveTest.AllOffensiveWords.someMethod(java.lang.String, java.lang.String)": {
               "summary": ["The length of comments is 29 words (on/near line 40)."],
               "location": "40",
               "issues": [],
               "throws": {},
               "analyzed": {},
               "returns": [],
               "parameters": {}
            }},
            "location": "12",
            "issues": [],
            "fields_analyzed": true,
            "throws_analyzed": false,
            "params_analyzed": false,
            "constructors": {"offensiveTest.AllOffensiveWords(int, int)": {
               "summary": ["The length of comments is 24 words (on/near line 24)."],
               "location": "24",
               "issues": [],
               "throws": {},
               "analyzed": {},
               "parameters": {}
            }},
            "fields": {"offensiveTest.AllOffensiveWords.foo": {
               "summary": ["The length of comments is 9 words (on/near line 14)."],
               "location": "14",
               "issues": []
            }}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "A total of 3 classes were processed.",
         "A total of 5 constructors were processed.",
         "A total of 5 methods were processed.",
         "A total of 3 fields were processed.",
         "A total of 337 words were processed.",
         "A total of 16 class, constructor, method, and field comments were processed.",
         "The overall average number of words per comment is 21."
      ],
      "score": "21.06",
      "timing": {
         "execution time": "6",
         "start time": "1358053618374",
         "end time": "1358053618380"
      },
      "notes": {
         "postamble": [],
         "preamble": [
            "Javadoc tags (@tag) from constructors and methods are not considered as a part of this analysis.",
            "The score in this module is calculated by determining the ratio of the number of words from comments to the total number of comments."
         ]
      }
   }
}
{
   "information": {
      "constructors processed": 5,
      "fields processed": 3,
      "classes processed": 3,
      "description": "This module identifies \"offensive\" English words used in comments at the class, method,\nand field level. Usage of these types of words is considered to be unprofessional.\nThe COMTOR dictionary list of offensive words contains over 1,300 words and word\nvariants. If you have a suggestion for a word that should be added to the dictionary,\nplease email the COMTOR team at comtor@tcnj.edu.",
      "name": "Offensive Words",
      "methods processed": 5,
      "packages processed": 1,
      "parameters processed": 12,
      "total number of words processed": 434
   },
   "results": {
      "classes": {
         "offensiveTest.NoOffensiveWords": {
            "returns_analyzed": true,
            "summary": [],
            "methods": {
               "offensiveTest.NoOffensiveWords.returnTrue()": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.NoOffensiveWords.main(java.lang.String[])": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {"NullPointerException": []},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {"args": []}
               }
            },
            "noProblemMessage": "No offensive words were found in processing this class.",
            "location": {},
            "issues": [],
            "fields_analyzed": true,
            "throws_analyzed": true,
            "params_analyzed": true,
            "numProblemsDetected": "0",
            "constructors": {
               "offensiveTest.NoOffensiveWords(int, int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {"NullPointerException": []},
                  "analyzed": {},
                  "parameters": {
                     "two": [],
                     "three": []
                  }
               },
               "offensiveTest.NoOffensiveWords(int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {"one": []}
               }
            },
            "fields": {"offensiveTest.NoOffensiveWords.foo": {
               "summary": [],
               "location": {},
               "issues": []
            }}
         },
         "offensiveTest.OneOffensiveWord": {
            "returns_analyzed": true,
            "summary": [],
            "methods": {
               "offensiveTest.OneOffensiveWord.returnTrue()": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered an offensive word on/near line 60."],
                  "throws": {},
                  "analyzed": {},
                  "returns": ["'xxx' considered an offensive word on/near line 60."],
                  "parameters": {}
               },
               "offensiveTest.OneOffensiveWord.main(java.lang.String[])": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered an offensive word on/near line 48."],
                  "throws": {"NullPointerException": ["'xxx' considered an offensive word on/near line 48."]},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {"args": ["'xxx' considered an offensive word on/near line 48."]}
               }
            },
            "location": {},
            "issues": ["'xxx' considered an offensive word on/near line 12."],
            "fields_analyzed": true,
            "throws_analyzed": true,
            "params_analyzed": true,
            "numProblemsDetected": "12",
            "constructors": {
               "offensiveTest.OneOffensiveWord(int, int)": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered an offensive word on/near line 34."],
                  "throws": {"NullPointerException": ["'xxx' considered an offensive word on/near line 34."]},
                  "analyzed": {},
                  "parameters": {
                     "two": ["'xxx' considered an offensive word on/near line 34."],
                     "three": []
                  }
               },
               "offensiveTest.OneOffensiveWord(int)": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered an offensive word on/near line 22."],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {"one": ["'xxx' considered an offensive word on/near line 22."]}
               }
            },
            "fields": {"offensiveTest.OneOffensiveWord.foo": {
               "summary": [],
               "location": {},
               "issues": ["'xxx' considered an offensive word on/near line 14."]
            }}
         },
         "offensiveTest.AllOffensiveWords": {
            "returns_analyzed": true,
            "summary": [],
            "methods": {"offensiveTest.AllOffensiveWords.someMethod(java.lang.String, java.lang.String)": {
               "summary": [],
               "location": {},
               "issues": [
                  "'xxx' considered an offensive word on/near line 40.",
                  "'xxx' considered an offensive word on/near line 40."
               ],
               "throws": {"NullPointerException": [
                  "'xxx' considered an offensive word on/near line 40.",
                  "'xxx' considered an offensive word on/near line 40."
               ]},
               "analyzed": {},
               "returns": [
                  "'xxx' considered an offensive word on/near line 40.",
                  "'xxx' considered an offensive word on/near line 40."
               ],
               "parameters": {
                  "arg2": [
                     "'xxx' considered an offensive word on/near line 40.",
                     "'xxx' considered an offensive word on/near line 40."
                  ],
                  "arg1": [
                     "'xxx' considered an offensive word on/near line 40.",
                     "'xxx' considered an offensive word on/near line 40."
                  ]
               }
            }},
            "location": {},
            "issues": [
               "'xxx' considered an offensive word on/near line 12.",
               "'xxx' considered an offensive word on/near line 12."
            ],
            "fields_analyzed": true,
            "throws_analyzed": true,
            "params_analyzed": true,
            "numProblemsDetected": "22",
            "constructors": {"offensiveTest.AllOffensiveWords(int, int)": {
               "summary": [],
               "location": {},
               "issues": [
                  "'xxx' considered an offensive word on/near line 24.",
                  "'xxx' considered an offensive word on/near line 24."
               ],
               "throws": {"NullPointerException": [
                  "'xxx' considered an offensive word on/near line 24.",
                  "'xxx' considered an offensive word on/near line 24."
               ]},
               "analyzed": {},
               "parameters": {
                  "two": [
                     "'xxx' considered an offensive word on/near line 24.",
                     "'xxx' considered an offensive word on/near line 24."
                  ],
                  "three": [
                     "'xxx' considered an offensive word on/near line 24.",
                     "'xxx' considered an offensive word on/near line 24."
                  ]
               }
            }},
            "fields": {"offensiveTest.AllOffensiveWords.foo": {
               "summary": [],
               "location": {},
               "issues": [
                  "'xxx' considered an offensive word on/near line 14.",
                  "'xxx' considered an offensive word on/near line 14."
               ]
            }}
         }
      },
      "charts": [],
      "packages": {"offensiveTest": []},
      "metrics": [
         "1 package(s) were processed.",
         "3 class(es) were processed.",
         "5 constructor(s) were processed.",
         "5 method(s) were processed.",
         "12 parameter(s) were processed.",
         "3 field(s) were processed.",
         "434 words were processed (including duplicates).",
         "89 unique words were processed (excludes duplicates).",
         "34 'offensive' words were identified (including duplicates)."
      ],
      "score": "92%",
      "timing": {
         "execution time": "36",
         "start time": "1358053618616",
         "end time": "1358053618652"
      },
      "notes": {
         "postamble": ["34 word(s) in your source code are considered offensive due to the fact that they\nare listed in our 'offensive word list'. In order to create a greater level of professionalism\nin your source code, please consider editing these words."],
         "preamble": [
            "Constructor and method tags which are not @param, @return, or @throws are not currently processed.",
            "The score in this module is calculated by determining the overall percentage of non-offensive words from all comments."
         ]
      }
   }
}
{
   "information": {
      "constructors processed": 5,
      "classes processed": 3,
      "description": "This module calculates the percentage of constructors and method that have associated\ncomments. The reported score is the overall percentage of methods and constructors\nwhich are commented. The length and/or content of the comment is not considered.\nOther types of comments (class-level, field-level) are not considered in this analysis.",
      "name": "Percentage Methods",
      "constructors commented": 5,
      "methods processed": 5,
      "methods commented": 5
   },
   "results": {
      "classes": {
         "offensiveTest.NoOffensiveWords": {
            "returns_analyzed": false,
            "summary": [
               "2 of the 2 constructors (100%) are commented.",
               "2 of the 2 methods (100%) are commented."
            ],
            "methods": {
               "offensiveTest.NoOffensiveWords.returnTrue()": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.NoOffensiveWords.main(java.lang.String[])": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               }
            },
            "noProblemMessage": "No uncommented constructors or methods were found in processing this class.",
            "location": {},
            "issues": [],
            "fields_analyzed": false,
            "throws_analyzed": false,
            "params_analyzed": false,
            "numProblemsDetected": "0",
            "constructors": {
               "offensiveTest.NoOffensiveWords(int, int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               },
               "offensiveTest.NoOffensiveWords(int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               }
            },
            "fields": {}
         },
         "offensiveTest.OneOffensiveWord": {
            "returns_analyzed": false,
            "summary": [
               "2 of the 2 constructors (100%) are commented.",
               "2 of the 2 methods (100%) are commented."
            ],
            "methods": {
               "offensiveTest.OneOffensiveWord.returnTrue()": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.OneOffensiveWord.main(java.lang.String[])": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               }
            },
            "noProblemMessage": "No uncommented constructors or methods were found in processing this class.",
            "location": {},
            "issues": [],
            "fields_analyzed": false,
            "throws_analyzed": false,
            "params_analyzed": false,
            "numProblemsDetected": "0",
            "constructors": {
               "offensiveTest.OneOffensiveWord(int, int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               },
               "offensiveTest.OneOffensiveWord(int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {}
               }
            },
            "fields": {}
         },
         "offensiveTest.AllOffensiveWords": {
            "returns_analyzed": false,
            "summary": [
               "1 of the 1 constructors (100%) are commented.",
               "1 of the 1 methods (100%) are commented."
            ],
            "methods": {"offensiveTest.AllOffensiveWords.someMethod(java.lang.String, java.lang.String)": {
               "summary": [],
               "location": {},
               "issues": [],
               "throws": {},
               "analyzed": {},
               "returns": [],
               "parameters": {}
            }},
            "noProblemMessage": "No uncommented constructors or methods were found in processing this class.",
            "location": {},
            "issues": [],
            "fields_analyzed": false,
            "throws_analyzed": false,
            "params_analyzed": false,
            "numProblemsDetected": "0",
            "constructors": {"offensiveTest.AllOffensiveWords(int, int)": {
               "summary": [],
               "location": {},
               "issues": [],
               "throws": {},
               "analyzed": {},
               "parameters": {}
            }},
            "fields": {}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "3 class(es) were processed.",
         "5 method(s) were processed.",
         "5 method(s) were commented.",
         "100% method(s) were commented across all classes.",
         "5 constructors(s) were processed.",
         "5 constructors(s) were commented.",
         "100% constructors(s) were commented across all classes."
      ],
      "score": "100%",
      "timing": {
         "execution time": "1",
         "start time": "1358053618386",
         "end time": "1358053618387"
      },
      "notes": {
         "postamble": [],
         "preamble": [
            "References to line numbers in this report are generally to the subsequent non-comment Java statement that follows the commment/comment block under analysis.",
            "The score in this module is calculated by determining the overall percentage of commented methods and constructors across all methods and constructors identified."
         ]
      }
   }
}
{
   "information": {
      "classes processed": 3,
      "description": "This module compares words found in comments against an English word dictionary.\nThe COMTOR word dictionary contains more than 97,000 entries. The analysis includes\nthe list of known Java API classes (JDK), HTML tags and attributes, Java keywords,\nand user-defined symbols from the submitted code (class, method, constructor, field\nnames). COMTOR uses JavaDoc, as such JavaDoc does not provide access to local variables\nwithin methods and blocks. Thus, the word list is not exhaustive.",
      "name": "Spell Check"
   },
   "results": {
      "classes": {
         "offensiveTest.NoOffensiveWords": {
            "returns_analyzed": true,
            "summary": [],
            "methods": {
               "offensiveTest.NoOffensiveWords.returnTrue()": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {}
               },
               "offensiveTest.NoOffensiveWords.main(java.lang.String[])": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {"NullPointerException": []},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {"args": []}
               }
            },
            "noProblemMessage": "No spelling errors were found in processing this class.",
            "location": {},
            "issues": [],
            "fields_analyzed": true,
            "throws_analyzed": true,
            "params_analyzed": true,
            "numProblemsDetected": "0",
            "constructors": {
               "offensiveTest.NoOffensiveWords(int, int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {"NullPointerException": []},
                  "analyzed": {},
                  "parameters": {
                     "two": [],
                     "three": []
                  }
               },
               "offensiveTest.NoOffensiveWords(int)": {
                  "summary": [],
                  "location": {},
                  "issues": [],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {"one": []}
               }
            },
            "fields": {"offensiveTest.NoOffensiveWords.foo": {
               "summary": [],
               "location": {},
               "issues": []
            }}
         },
         "offensiveTest.OneOffensiveWord": {
            "returns_analyzed": true,
            "summary": [],
            "methods": {
               "offensiveTest.OneOffensiveWord.returnTrue()": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered a misspelled word on/near line 60."],
                  "throws": {},
                  "analyzed": {},
                  "returns": ["'xxx' considered a misspelled word on/near line 60."],
                  "parameters": {}
               },
               "offensiveTest.OneOffensiveWord.main(java.lang.String[])": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered a misspelled word on/near line 48."],
                  "throws": {"NullPointerException": ["'xxx' considered a misspelled word on/near line 48."]},
                  "analyzed": {},
                  "returns": [],
                  "parameters": {"args": ["'xxx' considered a misspelled word on/near line 48."]}
               }
            },
            "location": {},
            "issues": ["'xxx' considered a misspelled word on/near line 12."],
            "fields_analyzed": true,
            "throws_analyzed": true,
            "params_analyzed": true,
            "numProblemsDetected": "12",
            "constructors": {
               "offensiveTest.OneOffensiveWord(int, int)": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered a misspelled word on/near line 34."],
                  "throws": {"NullPointerException": ["'xxx' considered a misspelled word on/near line 34."]},
                  "analyzed": {},
                  "parameters": {
                     "two": ["'xxx' considered a misspelled word on/near line 34."],
                     "three": []
                  }
               },
               "offensiveTest.OneOffensiveWord(int)": {
                  "summary": [],
                  "location": {},
                  "issues": ["'xxx' considered a misspelled word on/near line 22."],
                  "throws": {},
                  "analyzed": {},
                  "parameters": {"one": ["'xxx' considered a misspelled word on/near line 22."]}
               }
            },
            "fields": {"offensiveTest.OneOffensiveWord.foo": {
               "summary": [],
               "location": {},
               "issues": ["'xxx' considered a misspelled word on/near line 14."]
            }}
         },
         "offensiveTest.AllOffensiveWords": {
            "returns_analyzed": true,
            "summary": [],
            "methods": {"offensiveTest.AllOffensiveWords.someMethod(java.lang.String, java.lang.String)": {
               "summary": [],
               "location": {},
               "issues": [
                  "'xxx' considered a misspelled word on/near line 40.",
                  "'XXX' considered a misspelled word on/near line 40."
               ],
               "throws": {"NullPointerException": [
                  "'XXX' considered a misspelled word on/near line 40.",
                  "'XXX' considered a misspelled word on/near line 40."
               ]},
               "analyzed": {},
               "returns": [
                  "'xxx' considered a misspelled word on/near line 40.",
                  "'xxx' considered a misspelled word on/near line 40."
               ],
               "parameters": {
                  "arg2": [
                     "'xxx' considered a misspelled word on/near line 40.",
                     "'xxx' considered a misspelled word on/near line 40."
                  ],
                  "arg1": [
                     "'XXX' considered a misspelled word on/near line 40.",
                     "'XXX' considered a misspelled word on/near line 40."
                  ]
               }
            }},
            "location": {},
            "issues": [
               "'xxx' considered a misspelled word on/near line 12.",
               "'xxx' considered a misspelled word on/near line 12."
            ],
            "fields_analyzed": true,
            "throws_analyzed": true,
            "params_analyzed": true,
            "numProblemsDetected": "22",
            "constructors": {"offensiveTest.AllOffensiveWords(int, int)": {
               "summary": [],
               "location": {},
               "issues": [
                  "'xxx' considered a misspelled word on/near line 24.",
                  "'xxx' considered a misspelled word on/near line 24."
               ],
               "throws": {"NullPointerException": [
                  "'xxx' considered a misspelled word on/near line 24.",
                  "'xxx' considered a misspelled word on/near line 24."
               ]},
               "analyzed": {},
               "parameters": {
                  "two": [
                     "'xxx' considered a misspelled word on/near line 24.",
                     "'xxx' considered a misspelled word on/near line 24."
                  ],
                  "three": [
                     "'xxx' considered a misspelled word on/near line 24.",
                     "'xxx' considered a misspelled word on/near line 24."
                  ]
               }
            }},
            "fields": {"offensiveTest.AllOffensiveWords.foo": {
               "summary": [],
               "location": {},
               "issues": [
                  "'xxx' considered a misspelled word on/near line 14.",
                  "'xxx' considered a misspelled word on/near line 14."
               ]
            }}
         }
      },
      "charts": [],
      "packages": {},
      "metrics": [
         "0% of the words in the comments were misspelled.",
         "434 words analyzed.",
         "3 class(es) were processed.",
         "93 correctly spelled words (excludes duplicates)",
         "2 incorrectly spelled words (excludes duplicates)",
         "307 duplicate good words",
         "32 duplicate bad words"
      ],
      "score": "92%",
      "timing": {
         "execution time": "12",
         "start time": "1358053620587",
         "end time": "1358053620599"
      },
      "notes": {
         "postamble": ["2 word(s) in your source code are considered spelled incorrectly due to the fact\nthat they are listed in our dictionary. In order to create a greater level of professionalism\nin your source code, please consider editing these words. If you believe you have\na false positive result, please email the COMTOR team at comtor@tcnj.edu and we\nconsider your submission to the dictionary."],
         "preamble": [
            "Constructor and method tags which are not @param, @return, or @throws are not currently processed.",
            "The score in this module is calculated by determining the overall percentage of correctly spelled words from all comments "
         ]
      }
   }
}
