<?xml version="1.0"?>

<project name="comtor" default="cloudCompile" basedir=".">
	<description>Build file for the COMTOR application(s)</description>
	<defaultexcludes remove="**/.DS_Store"/>

	<!-- Configure the custom Ant tasks for the Manager application -->
	<taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask"/>
	<taskdef name="list"      classname="org.apache.catalina.ant.ListTask"/>
	<taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask"/>
	<taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask"/>
	<taskdef name="start"     classname="org.apache.catalina.ant.StartTask"/>
	<taskdef name="stop"      classname="org.apache.catalina.ant.StopTask"/>
	<taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask"/>	

	<!-- Define some basic properties -->
	<property name="thirdpartyjars" location="third-party/lib"/>
	<property name="version" value="2.2.0"/>
	<property name="localhost" value="localhost"/>
	
	<!-- Build up a classpath file path for later use. -->
	<condition property="toolsjar" value="${java.home}/../Classes/classes.jar" else="${java.home}${file.separator}..${file.separator}lib${file.separator}tools.jar">
		<and>
			<os family="mac"/>
			<os family="unix"/>
		</and>
	</condition>
			
	<path id="comtor.class.path">
		<fileset dir="${thirdpartyjars}">
			<include name="*.jar"/>
		</fileset>
		<pathelement path="${toolsjar}"/>
		<fileset dir="core">
			<include name="comtorcore-*.jar"/>
		</fileset>
	</path>
	
	<!-- ================ -->
	<!-- START OF TARGETS -->
	<!-- ================ -->
	
	<!-- Initialization tasks (no description attribute, it's a minor task) -->
	<target name="init">
		<tstamp/>
	</target>
	
	<!-- Removes the class files, source backups, and debug output -->
	<target name="clean" description="Clean source backups, old reports, and .class files">
		<ant dir="api/keygen" target="clean"/>
		<ant dir="api/apiserv" target="clean"/>
		<ant dir="wordProblemSubmitter" target="clean"/>
		<ant dir="code" target="clean"/>
		<ant dir="core" target="clean"/>
		<ant dir="lamp" target="clean"/>
		<ant dir="ide-clients/netbeans" target="clean"/>
		
		<delete>
			<fileset dir="." casesensitive="yes">
				<include name="**/*~ "/>
				<include name="**/*.class"/>
				<include name="**/.DS_Store"/>
				<include name="comtorReport.txt"/>
				<include name="trace-*.txt"/>
			</fileset>
		</delete>		
	</target>
	
	<!-- Sets the deployment host based on the user-provided input, or uses localhost (default) -->
	<target name="-sethost" depends="-setport">
		<echo>Setting the deployment host to ${deploy}. You can change this behavior via the deploy property:
			* -Ddeploy=hostname
		</echo>
		<condition property="deployhost" value="http://${deploy}:${deployport}/manager/text"
					else="http://localhost:${deployport}/manager/text">
			<isset property="deploy"/>
		</condition>
	</target>

	<!-- Sets the deployment port to the user-provided input, or uses 80 as the default. -->
	<target name="-setport">
		<condition property="deployport" value="${port}" else="80">
			<isset property="port"/>
		</condition>

		<echo>Setting the deployment port to ${deployport}. You can change this behavior via the port property:
			* -Dport=80 (presence of a value forces the use of port 80)
		</echo>
	</target>

	<!-- Ensures that the user has set the deployment action property -->
	<target name="-waraction.check">
		<condition property="waraction" value="warDeploy">
			<equals arg1="${action}" arg2="deploy"/>
		</condition>

		<condition property="waraction" value="warRedeploy">
			<equals arg1="${action}" arg2="redeploy"/>
		</condition>

		<condition property="waraction" value="warUndeploy">
			<equals arg1="${action}" arg2="undeploy"/>
		</condition>

		<antcall target="-waraction.fail"/>
	</target>

	<!-- Stops the build and outputs a message if the waraction property was not set by user -->
	<target name="-waraction.fail" unless="waraction">
		<fail>Please the 'action' property to one of: 'deploy', 'undeploy', 'redeploy'. For example:
			* -Daction=deploy
			* -Daction=undeploy
			* -Daction=redeploy
		</fail>
	</target>

	<!-- Ensures the user has set the deployment properties to provide to the servlet container -->
	<target name="-credentials.check">
		<condition property="credentials.set">
			<and>
				<isset property="username"/>
				<isset property="password"/>
			</and>
		</condition>
		<antcall target="-credentials.fail"/>
	</target>
	
	<!-- Stops the build and outputs a message if the deployment properties were not set by user -->
	<target name="-credentials.fail" unless="credentials.set">
		<fail>Please set the following properties:
	* the username of the servlet manager: -Dusername=user
	* the password of the servlet manager: -Dpassword=passwd
		</fail>
	</target>

	<!-- Builds the command line version (stand alone) jar file of COMTOR -->
	<target name="cli" description="Builds a distributable Jar file for use as a stand-alone application">
		<ant dir="code" target="cli" inheritRefs="true"/>
	</target>

	<!-- Runs the command line version (stand alone) via jar file of COMTOR -->
	<target name="cliRun" depends="cli" description="Runs the CLI version of COMTOR via the jar file on the dir path provided.">
		<ant dir="code" target="executeCli" inheritRefs="true"/>
	</target>

	<!-- Runs the command line version (stand alone) via jar file of COMTOR on the test cases in the tests/ -->
	<target name="cliTest" depends="cli" description="Runs the CLI version of COMTOR against the tests/ directory">
		<ant dir="code" target="testCli" inheritRefs="true"/>
	</target>

	<!-- Builds a jar file of the COMTOR source code (used for dogfooding) -->
	<target name="srcjar" description="Builds a jar file of the COMTOR source code.">
		<jar destfile="tests/comtorSrc.jar">
			<fileset dir="api/apiserv/src/">
				<include name="**/*.java"/>
			</fileset>

			<fileset dir="api/keygen/src/">
				<include name="**/*.java"/>
			</fileset>

			<fileset dir="code/src/">
				<include name="**/*.java"/>
				<exclude name="org/comtor/incomplete/*.java"/>
				<exclude name="org/json/*.java"/>
			</fileset>

			<fileset dir="core/src/">
				<include name="**/*.java"/>
				<exclude name="org/comtor/analyzers/GeneralResources/*.java"/>
				<exclude name="org/json/*.java"/>
			</fileset>

			<fileset dir="ide-clients/netbeans/src/">
				<include name="**/*.java"/>
			</fileset>

		</jar>
	</target>

	<!-- Builds the COMTOR core jar file -->
	<target name="corejar" description="Builds the COMTOR core library jar file.">
		<echo>JAVAHOME is: ${java.home}</echo>
		<echo>tools.jar location is: ${toolsjar}</echo>
		<ant dir="core" target="jar" inheritRefs="true" inheritAll="true"/>
	</target>


	<!-- Requires the catalina-ant.jar file in the ant/lib directory locally. See 
	     http://tomcat.apache.org/tomcat-7.0-doc/manager-howto.html#Executing_Manager_Commands_With_Ant or, 
	     http://tomcat.apache.org/tomcat-6.0-doc/manager-howto.html#Executing_Manager_Commands_With_Ant -->

	<!-- WWW Interface Service -->
	<target name="cloudWww" depends="init, corejar" description="Compiles the source code and builds the cloud/servlet www app">
		<ant dir="code" target="createWar" inheritRefs="true"/>
	</target>

	<target name="cloudWwwWar" depends="-credentials.check, -sethost, -waraction.check, corejar"
			description="Performs the specified war deployment action on the cloud www interface.">
		<ant dir="code" target="${waraction}" inheritRefs="true"/>
	</target>


	<!-- Word Problem Submitter Service -->
	<target name="wordProblem" depends="init, corejar" description="Compiles the code base and builds the war file">
		<ant dir="wordProblemSubmitter" target="createWar" inheritRefs="true"/>
	</target>

	<target name="wordProblemWar" depends="-credentials.check, -sethost, -waraction.check, corejar"
			description="Performs the specified war deployment action on the disputer service.">
		<ant dir="wordProblemSubmitter" target="${waraction}" inheritRefs="true"/>
	</target>


	<!-- API Service -->	
	<target name="apiServ" depends="init, corejar" description="Compiles the source code and builds the api server war file">
		<ant dir="api/apiserv" target="createWar" inheritRefs="true"/>
	</target>

	<target name="apiServWar" depends="-credentials.check, -sethost, -waraction.check, corejar" 
			description="Performs the specified war deployment action on the api service.">
		<ant dir="api/apiserv" target="${waraction}" inheritRefs="true"/>
	</target>


	<!-- API Keygen Service -->
	<target name="apiKeygen" depends="init, corejar" description="Compiles the source code and builds the keygen war file">
		<ant dir="api/keygen" target="createWar" inheritRefs="true"/>
	</target>

	<target name="apiKeygenWar" depends="-credentials.check, -sethost, -waraction.check, corejar"
			description="Performs the specified war deployment action on the api keygen service.">
		<ant dir="api/keygen" target="${waraction}" inheritRefs="true"/>
	</target>
	
	<!-- Setup Jmeter load testing requirements -->
	<property name="jmeterDir" value="${basedir}/third-party/apache-jmeter-2.10"/>
	<path id="jmeter.classpath">
        <fileset dir="${jmeterDir}/extras">
          <include name="ant-jmeter*.jar"/>
        </fileset>
    </path>
	
	<path id="xslt.classpath">
        <fileset dir="${jmeterDir}/lib" includes="xalan*.jar"/>
        <fileset dir="${jmeterDir}/lib" includes="serializer*.jar"/>
    </path>
	
	<taskdef name="jmeter" classpathref="jmeter.classpath" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask"/>
	
	<!-- Execute Jmeter load testing -->
	<target name ="loadTest" depends="-setJmeterParams">
		<tstamp><format property="output.datestamp" pattern="yyyyMMdd_HHmm"/></tstamp>
		<jmeter jmeterhome="${jmeterDir}/" testplan="${jmeterDir}/test_plans/COMTOR.jmx" resultlog="${jmeterDir}/test_results/JMeterResults_${output.datestamp}.xml">
			<property name="request.threads" value="${userCount}"/>
			<property name="request.loop" value="${loopCount}"/>
			<property name="jmeter.save.saveservice.assertion_results" value="all"/>
			<property name="jmeter.save.saveservice.output_format" value="xml"/>
		</jmeter>
		<echo message="${userCount}"/>
	</target> 
	
	<!-- Set default jmeter paramters -->
	<target name="-setJmeterParams">
        <condition property="userCount" value="5">
			<not>
				<isset property="userCount"/>
			</not>
		</condition>
		<condition property="loopCount" value="1">
			<not>
				<isset property="loopCount"/>
			</not>
		</condition>
	</target>
	
	<!-- Generate Jmeter HTML report -->
	<target name="jmeterReport" depends="loadTest">
		<tstamp><format property="report.datestamp" pattern="yyyy/MM/dd HH:mm"/></tstamp>
		<xslt
		in="${jmeterDir}/test_results/JMeterResults_${output.datestamp}.xml"
		out="${jmeterDir}/test_results/JMeterResults_${output.datestamp}.html"
		style="${jmeterDir}/extras/jmeter-results-detail-report_21.xsl">
			<param name="showData" expression="y"/>
			<param name="titleReport" expression="COMTOR .jar Upload Simulation"/>
			<param name="dateReport" expression="${report.datestamp}"/>
		</xslt>
		<delete file="${jmeterDir}/test_results/JMeterResults_${output.datestamp}.xml"/>
	</target>
	
</project>
