/**
 *  Comment Mentor: A Comment Quality Assessment Tool
 *  Copyright (C) 2011 The College of New Jersey
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package comtor;

import comtor.analyzers.*;
import com.sun.javadoc.*;
import java.io.*;
import java.sql.*;
import java.text.*;
import java.util.*;

/**
 * The ComtorDriver class is a tool to run COMTOR doclets (analysis modules)
 * and to pass a vector of property lists to the COMTOR report generator.
 *
 * @author Joe Brigandi
 * @author Stephen Sigwart
 * @author Peter DePasquale
 */
public class ComtorDriver extends Doclet {

	/**
	* Check for doclet-added options. Returns the number of arguments you mus specify on the
	* command line for the given option. For example, "-d docs" would return 2. This method is
	* required if the doclet contains any options. If this method is missing, Javadoc will print
	* an invalid flag error for every option.
	*
	* @param	option	Command line argument
	* @return	The number of arguments on the command line for an option
	* 			including the option name itself. Zero return means option
	* 			not known. Negative value means error occurred.
	*
	* @see com.sun.javadoc.Doclet#optionLength(String option) 
	*/
	public static int optionLength(String option) {
		if (option.equals("--config-file") || option.equals("--assignment-id"))
			return 2;
		else if (option.equals("--debug"))
			return 1;

		return 0;
	}

	/**
	* Check that options have the correct arguments. This method is not required, but is
	* recommended, as every option will be considered valid if this method is not present. It will
	* default gracefully (to true) if absent. Printing option related error messages (using the
	* provided DocErrorReporter) is the responsibility of this method.
	*
	* @param	options the array of command line arguments
	* @param	reporter a reference to the object holding the error message generated by
	*			this method.
	* @return 	true if the options are valid, false otherwise
	*
	* @see com.sun.javadoc.Doclet#validOptions(String[][] options, DocErrorReporter reporter) 
	*/
	public static boolean validOptions(String[][] options, DocErrorReporter reporter) {
		return true;
	}

	/**
	* Accepts a property list from the called doclets and puts them
	* in a vector. It then passes the vector to the report generator.
	*
	* @param	rootDoc the root of the documentation tree
	* @return	boolean true if a successful execution, false otherwise
	*/
	public static boolean start(RootDoc rootDoc) {

		// Look through options to get config file and assignmentId
		int assignmentId = -1;
		String configFile = null;
		String options[][] = rootDoc.options();
		boolean done = false;
		boolean debug = true;
		
		for (int i = 0; done == false && i < options.length; i++) {
			if (options[i][0].equals("--config-file")) {
				System.out.println("Config file: " + options[i][1]);
				configFile = options[i][1];
			} else if (options[i][0].equals("--assignment-id")) {
				System.out.println("Assignment Id: " + options[i][1]);
				assignmentId = Integer.parseInt(options[i][1]);
			} else if (options[i][0].equals("--debug")) {
				debug = true;
			}
		}

		if (!debug && ((configFile == null) || (assignmentId == -1))) {
			System.out.println("Missing either config file or assignment id.");
			return false;
		}

		try {
			PreparedStatement docletSectionsPrepStmt = null;
			PreparedStatement docletParametersPrepStmt = null;
			Connection db = null;
			
			// Get database connection so that we can get doclet grading settings and parameters
			if (!debug) {
				db = ComtorDatabase.getConnection(configFile);
				if (db == null)
					return false;
	
				// Prepare statement to get grading information
				docletSectionsPrepStmt = db.prepareStatement(
					"SELECT sectionName, maxGrade FROM docletGradeSections " +
					"dGS LEFT JOIN assignmentGradeBreakdownsView aGBW ON " +
					"dGS.docletGradeSectionId = aGBW.docletGradeSectionId " +
					" WHERE docletId IN (SELECT docletId FROM doclets WHERE" +
					"javaName=?) AND assignmentId=?");
				docletSectionsPrepStmt.setLong(2, assignmentId);
	
				// Prepare statement to get grading parameters
				docletParametersPrepStmt = db.prepareStatement(
					"SELECT parameterName, param FROM docletGradeParameters " +
					"dGP LEFT JOIN assignmentGradeParametersView aGPW ON " +
					"dGP.docletGradeParameterId = aGPW.docletGradeParameterId" +
					"WHERE docletId IN (SELECT docletId FROM doclets WHERE " +
					"javaName=?) AND assignmentId=?");
				docletParametersPrepStmt.setLong(2, assignmentId);
			}
			
			Vector<Properties> resultsVector = new Vector<Properties>(); 
			Vector<DocletThread> threads = new Vector<DocletThread>();
			Scanner scan = new Scanner(new File("Doclets.txt"));

			while (scan.hasNext()) {
				// Store doclet as docletName
				String docletName = scan.nextLine();
	
				try {
					// Create class for doclet
					Class docletClass = Class.forName(docletName);
	
					// Create new instance of the class and start thread
					ComtorDoclet comtorDoclet = (ComtorDoclet) docletClass.newInstance();
					System.out.println("Starting " + docletName);	
					DocletThread docThrd = new DocletThread();
					docThrd.setRootDoc(rootDoc);
					if (!debug) {
						docThrd.setDocletSectionsPrepStatements(
							docletSectionsPrepStmt, docletParametersPrepStmt);
					} else
						docThrd.setDebug();
					
					docThrd.setAnalyzer(comtorDoclet);
					docThrd.start();
					threads.add(docThrd);
				} catch (ClassNotFoundException e) {
					System.out.println("Class not found: " + e);
				} catch (ExceptionInInitializerError e) {
					System.out.println(e);
				} catch (LinkageError e) {
					System.out.println(e);
				}
			}

			// Wait for all threads to complete
			for (int i = 0; i < threads.size(); i++) {
				DocletThread docThrd = threads.get(i);
				docThrd.join();
	
				if (docThrd.getProperties() != null)
					// Add the resulting property list to the vector
					resultsVector.addElement(docThrd.getProperties());
			}
				
			// The following line is for debugging only. Please consult debug.txt for details.
			// (Some of which are old, but may still be helpful - PJD 7/12/11), which can be found
			// in the designdoc/tutorials directory.
			if (debug)
				ComtorDebugger.generateDebugFile(resultsVector);
			else {
				// Create report generator, set its configuration and passes it the results vector.
				GenerateReport report = new GenerateReport();
				report.setConfigFilename(configFile);
				report.generateReport(resultsVector);
				docletSectionsPrepStmt.close();
				db.close();
			}
			scan.close();
		}

		// Exceptions from above.  This should be less catch-all and integrated above better.
		catch (InterruptedException e) {
			System.out.println("InterruptedException");
			System.out.println(e.toString());
		} catch (InstantiationException ie) {
			System.out.println("InstantiationException");
			System.out.println(ie.toString());
		} catch (IllegalAccessException iae) {
			System.out.println("IllegalAccessException");
			System.out.println(iae.toString());
		} catch (IOException ioe) {
			System.out.println("IOException");
			System.out.println(ioe.toString());
		} catch (SQLException sqle) {
			System.out.println("SQLException");
			System.out.println(sqle.toString());
		} catch (Exception e) {
			System.out.println("Other Exception");
			System.out.println(e.toString());
		}
		return true;
	}

	/**
	 * The DocletThread class is used to run each doclet as a thread
	 *
	 * @author Stephen Sigwart
	 */
	private static class DocletThread extends Thread {
		private Properties list = null;
		private ComtorDoclet doclet;
		private PreparedStatement docletParametersPrepStmt;
		private PreparedStatement docletSectionsPrepStmt;
		private RootDoc rootDoc;
		private boolean debug = false;
		
		/**
		 * Sets the root document with which the doclet will work
		 *
		 * @param rootDoc A reference to the RootDoc
		 */
		public void setRootDoc(RootDoc rootDoc) {
			this.rootDoc = rootDoc;
		}
        
		/**
		 * Sets the debug flag to true (used for stand alone mode)
		 *
		 */
		public void setDebug() {
			debug = true;
		}

		/**
		 * Sets the doclet that will process the root document
		 *
		 * @param docletSectionsPrepStmt Prepared statement used to get doclet
		 *                               grading section info
		 * @param docletParametersPrepStmt Prepared statement used to get doclet
		 *                                 parameters for grading
		 */
		public void setDocletSectionsPrepStatements(PreparedStatement docletSectionsPrepStmt,
				PreparedStatement docletParametersPrepStmt) {
			this.docletSectionsPrepStmt   = docletSectionsPrepStmt;
			this.docletParametersPrepStmt = docletParametersPrepStmt;
		}

		/**
		 * Sets the doclet that will process the root document
		 *
		 * @param doclet Doclet that will process the root document
		 */
		public void setAnalyzer(ComtorDoclet doclet) {
			this.doclet = doclet;
		}

		 /**
		 * Runs the doclet on the root document
		 */
		public void run() {
			System.out.println("\tRunning analyzer: " + doclet);

			if (!debug) {
				// Get assignment specific information from database
				try {

					// Get and set grading options
					docletSectionsPrepStmt.setString(1, (doclet.getClass()).getName());
					ResultSet result = docletSectionsPrepStmt.executeQuery();

					if (result.first()) {
						do {
							doclet.setGradingBreakdown(result.getString(1), result.getFloat(2));
						} while (result.next());
					}

					// Get and set grading parameters
					docletParametersPrepStmt.setString(1, (doclet.getClass()).getName());
					result = docletParametersPrepStmt.executeQuery();

					if (result.first()) {
						do {
							doclet.setGradingParameter(result.getString(1), result.getString(2));
						} while (result.next());
					}
				} catch (SQLException e) {
					System.out.println(e);
				}
			}
			// call the analyze method to perform the analysis
			list = doclet.analyze(rootDoc);
			System.out.println("\tAnalyzer completed: " + doclet);
		}

		/**
		 * Returns the list of properties.
		 *
		 * @return Property list created by doclet
		 */
		public Properties getProperties() {
			return list;
		}
	}
}
