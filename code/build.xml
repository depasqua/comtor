<?xml version="1.0"?>

<project name="comtorCloudClient" default="compile" basedir=".">
	<description>Build file for the COMTOR Cloud client application</description>
	<echo>Subproject: comtorCloudClient</echo>

	<property name="cloudBaseDir" location="."/>
	<property name="cloudSrc" location="${cloudBaseDir}/src"/>
	<property name="cloudClasses" location="${cloudBaseDir}/classes"/>
	<property name="jarfilename" value="comtor.jar"/>
	<property name="includejars" value="../third-party/lib"/>
	<defaultexcludes remove="**/.DS_Store"/>

	<condition property="deploymentPath" value="/ROOT" else="/comtorServletDev">
		<isset property="release"/>
	</condition>
	<echo>Deployment path set to ${deploymentPath}. The default setting is /comtorServletDev (development release). To 
change this behavior, set the release property to any value:
				* -Drelease=true
	</echo>

	<condition property="warfilename" value="ROOT.war" else="comtorServletDev.war">
		<isset property="release"/>
	</condition>

	<!-- Compiles the sourec code of the COMTOR application (lamp, cloud, cli) -->
	<target name="compile" description="Compiles the source code of the COMTOR app">
		<mkdir dir="${cloudClasses}"/>
		<javac srcdir="${cloudSrc}" destdir="${cloudClasses}" includeantruntime="false" debug="true" debuglevel="lines,vars,source"
			excludes="org/comtor/incomplete/** org/comtor/examples/**">
			<classpath>
				<path refid="comtor.class.path"/>
				<fileset dir="${includejars}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="../core">
					<include name="comtorcore-*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- Builds the command line version (stand alone) jar file of COMTOR -->
	<target name="cli" depends="compile" description="Builds a distributable .jar file for use as a stand-alone application">
		<tstamp/>
		<copy file="../loggerconfig/log4j2.cli.xml" tofile="log4j2.xml" overwrite="true"/>
		<mkdir dir="temp"/>
		<unjar dest="temp">
			<fileset dir="${cloudBaseDir}/cloudDeploy/WEB-INF/lib">
				<include name="log4j*.jar"/>
			</fileset>

			<patternset>
				<include name="org/**"/>
			</patternset>
		</unjar>

		<jar destfile="${jarfilename}">
			<manifest>
				<attribute name="Main-Class" value="org.comtor.drivers.Comtor"/>
				<attribute name="Built-By" value="${user.name}"/>
				<attribute name="Implementation-Title" value="COMTOR CLI"/>
				<attribute name="Implementation-Version" value="${version} ${TODAY}"/> 
				<attribute name="Implementation-Vendor" value="The College of New Jersey"/>
			</manifest>

			<fileset dir="${cloudClasses}">
				<include name="**/*.class"/>
				<exclude name="org/comtor/cloud/*.class"/>
			</fileset>

			<fileset dir="temp">
				<include name="org/**"/>
			</fileset>

			<fileset dir=".">
				<include name="log4j2.xml"/>
			</fileset>
		</jar>
		<delete file="log4j2.xml"/>
		<delete dir="temp"/>
	</target>

	<!-- Initiates execution of the CLI -->
	<target name="executeCli" depends="-promptDir" if="dirPresent" description="Runs the CLI version of COMTOR.">
		<copy file="../loggerconfig/log4j2.cli.xml" tofile="${dirpath}/log4j2.xml" overwrite="true"/>

		<java jar="comtor.jar" fork="true" resultproperty="execResult">
			<arg value="-dir"/>
			<arg path="${dirpath}"/>
		</java>

		<delete>
			<fileset dir=".">
				<include name="log4j2.xml"/>
				<include name="badwords.txt"/>
				<include name="dictionary.txt"/>
				<include name="htmltags.txt"/>
				<include name="javaKeywords.txt"/>
				<include name="javaclasslist.txt"/>
				<include name="usersubmitted.txt"/>
				<include name="offensiveWhiteList.txt"/>
			</fileset>
		</delete>

		<condition property="runFail" value="true">
			<equals arg1="${execResult}" arg2="1"/>
		</condition>
		<antcall target="-runCliOutput"/>
	</target>

	<!-- Executes the test cases using the CLI version of COMTOR -->
	<target name="testCli" description="Runs the CLI version of COMTOR on the test files.">
		<antcall target="-runtest1"/>
		<antcall target="-runtest2"/>
		<antcall target="-runtest3"/>

		<delete>
			<fileset dir=".">
				<include name="badwords.txt"/>
				<include name="dictionary.txt"/>
				<include name="htmltags.txt"/>
				<include name="javaKeywords.txt"/>
				<include name="javaclasslist.txt"/>
				<include name="usersubmitted.txt"/>
				<include name="offensiveWhiteList.txt"/>
			</fileset>
		</delete>
	</target>

	<!-- Executes the cli against the tests/test1-offensiveWords directory -->
	<target name="-runtest1" description="Runs the CLI version of COMTOR on the test files found in the tests/test1-offensiveWords directory.">
		<property name="dirpath" location="../tests/test1-offensiveWords"/>
		<java jar="comtor.jar" fork="true" resultproperty="execResult">
			<arg value="-dir"/>
			<arg path="${dirpath}"/>
		</java>

		<condition property="runFail" value="true">
			<equals arg1="${execResult}" arg2="1"/>
		</condition>
		<antcall target="-runCliOutput"/>
	</target>

	<!-- Executes the cli against the tests/test2-nocomments directory -->
	<target name="-runtest2" description="Runs the CLI version of COMTOR on the test files found in the tests/test2-nocomment directory.">
		<property name="dirpath" location="../tests/test2-nocomments"/>
		<java jar="comtor.jar" fork="true" resultproperty="execResult">
			<arg value="-dir"/>
			<arg path="${dirpath}"/>
		</java>

		<condition property="runFail" value="true">
			<equals arg1="${execResult}" arg2="1"/>
		</condition>
		<antcall target="-runCliOutput"/>
	</target>

	<!-- Executes the cli against the tests/test3-spellCheck directory -->
	<target name="-runtest3" description="Runs the CLI version of COMTOR on the test files found in the tests/test3-spellCheck directory.">
		<property name="dirpath" location="../tests/test3-spellCheck"/>
		<java jar="comtor.jar" fork="true" resultproperty="execResult">
			<arg value="-dir"/>
			<arg path="${dirpath}"/>
		</java>

		<condition property="runFail" value="true">
			<equals arg1="${execResult}" arg2="1"/>
		</condition>
		<antcall target="-runCliOutput"/>
	</target>

	<!-- Prompts the user for the dir to process when executing the CLI version -->
	<target name="-promptDir" depends="cli" description="Prompts the user for the dirpath to use as input.">
		<input message="Input the directory (absolute or relative) path to the location of the testing code:" addproperty="dirpath"/>
		<available property="dirPresent" type="dir" file="${dirpath}"/>
		<antcall target="-runCliDirCheck"/>
	</target>

	<!-- Informs the user if the provided directory is not present -->
	<target name="-runCliDirCheck" unless="${dirPresent}">
		<echo>The specified directory: ${dirpath} does not exist.</echo>
	</target>

	<!-- Informs the user of the location of the results of execution of the CLI -->
	<target name="-runCliOutput" unless="${runFail}">
		<echo>The execution results are located in: ${dirpath}</echo>
	</target>

	<!-- Removes the class files, source backups, and debug output -->
	<target name="clean" description="Clean source backups, old reports, and .class files">
		<delete dir="${cloudClasses}"/>
		
		<delete>
			<fileset dir="." casesensitive="yes">
				<include name="**/*~ "/>
				<include name="**/.DS_Store"/>
				<include name="comtorServlet.war"/>
				<include name="comtorServletDev.war"/>
				<include name="${jarfilename}"/>
				<include name="comtorSrc.jar"/>
				<include name="comtor*Log.txt"/>
			</fileset>
		</delete>		
	</target>

	<!-- Builds the war file for TOMCAT/cloud release -->
	<target name="createWar" depends="compile" description="Builds the war file for the cloud release.">
		<mkdir dir="${cloudBaseDir}/cloudDeploy/www/files"/>
		<copy file="../loggerconfig/log4j2.api.xml" tofile="../loggerconfig/log4j2.xml" overwrite="true"/>
		<concat destfile="${cloudBaseDir}/cloudDeploy/www/files/README">
			This directory will contain session directories.
		</concat>
		<war destfile="${warfilename}" webxml="${cloudBaseDir}/cloudDeploy/WEB-INF/web.xml">
			<fileset dir="${cloudBaseDir}/cloudDeploy/www"/>
			<fileset dir="${cloudBaseDir}/cloudDeploy/Web-Content"/>
			<classes dir="${cloudBaseDir}/classes"/>
			<classes file="../loggerconfig/log4j2.xml"/>
		</war>
		<delete dir="${cloudBaseDir}/cloudDeploy/www"/>
		<delete file="../loggerconfig/log4j2.xml"/>
	</target>

	<!-- Deployment tasks -->
 	<target name="warDeploy" depends="createWar" description="Deploys the web application">
 		<echo>Deployment url: ${deployhost}</echo>
 		<echo>   Path: ${deploymentPath}</echo>
		<deploy url="${deployhost}" username="${username}" password="${password}" path="${deploymentPath}" war="file:code/${warfilename}"/>
	</target>

	<target name="warUndeploy" description="Undeploys the web application.">
 		<echo>Undeployment url: ${deployhost}</echo>
 		<echo>   Path: ${deploymentPath}</echo>
		<undeploy url="${deployhost}" username="${username}" password="${password}" path="${deploymentPath}"/>
	</target>

	<target name="warRedeploy" depends="createWar" description="Redeploys the web application.">
		<antcall target="createWar" inheritRefs="true"/>
		<antcall target="warUndeploy" inheritRefs="true"/>
		<antcall target="warDeploy" inheritRefs="true"/>
	</target>

</project>